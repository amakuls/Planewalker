// Generated by CoffeeScript 1.6.3
(function() {
  var MainLoop, Player, currentFrame, currentFrameIncrease, currentFrameNum, currentFrameNum2, gameCanvas, grafx, isDown, isLeft, isRight, isUp, player, spriteFrames, spritesheet;

  gameCanvas = document.getElementById("game");

  grafx = gameCanvas.getContext('2d');

  Player = (function() {
    function Player() {
      this.width = 0;
      this.height = 0;
      this.Previous_X = 0;
      this.Previous_Y = 0;
      this.Velocity_X = 0;
      this.Velocity_Y = 0;
      this.speed = 2.5;
      this.diagonalSpeed = (Math.sqrt(this.speed * this.speed * 2)) / 2;
    }

    return Player;

  })();

  spriteFrames = {};

  player = new Player();

  spritesheet = new Image();

  currentFrame = "0001";

  $.get("/PCSprite.json", function(data) {
    var spritesheetinfo;
    spritesheetinfo = data;
    spritesheet.src = "Images/PCSprite.png";
    spritesheet.width = spritesheetinfo.meta.w;
    spritesheet.height = spritesheetinfo.meta.h;
    spriteFrames = spritesheetinfo.frames;
    player.sprite = spriteFrames["PCLeft-Idle" + currentFrame + ".png"];
    player.height = player.sprite.frame.h;
    player.width = player.sprite.frame.w;
    return $.get("/playerstats", function(data) {
      player.side = parseFloat(data.s);
      player.Y = parseFloat(data.y);
      player.X = parseFloat(data.x);
      return MainLoop();
    });
  });

  isLeft = false;

  isRight = false;

  isUp = false;

  isDown = false;

  window.onkeydown = function(e) {
    if (e.keyCode === 65) {
      isLeft = true;
    }
    if (e.keyCode === 68) {
      isRight = true;
    }
    if (e.keyCode === 87) {
      isUp = true;
    }
    if (e.keyCode === 83) {
      return isDown = true;
    }
  };

  window.onkeyup = function(e) {
    if (e.keyCode === 65) {
      isLeft = false;
    }
    if (e.keyCode === 68) {
      isRight = false;
    }
    if (e.keyCode === 87) {
      isUp = false;
    }
    if (e.keyCode === 83) {
      return isDown = false;
    }
  };

  window.onbeforeunload = function() {
    return $.post("/playerstats", {
      x: player.X,
      y: player.Y,
      s: player.side
    });
  };

  window.onunload = function() {
    return $.post("/playerstats", {
      x: player.X,
      y: player.Y,
      s: player.side
    });
  };

  currentFrameNum = 0;

  currentFrameNum2 = 0;

  currentFrameIncrease = function() {
    currentFrameNum = parseFloat(currentFrame[3]);
    currentFrameNum2 = parseFloat(currentFrame[2]);
    if (currentFrameNum === 2) {
      currentFrameNum2 = 0;
    }
    if (currentFrameNum < 9) {
      currentFrameNum++;
    } else {
      currentFrameNum2 = 1;
      currentFrameNum = 1;
    }
    return currentFrame = "00" + String(currentFrameNum2) + String(currentFrameNum);
  };

  setInterval(currentFrameIncrease, 1000 / 12);

  MainLoop = function() {
    gameCanvas.width = window.innerWidth;
    gameCanvas.height = window.innerHeight;
    if (isUp) {
      player.Velocity_Y = -player.speed;
    }
    if (isDown) {
      player.Velocity_Y = player.speed;
    }
    if (isLeft) {
      player.Velocity_X = -player.speed;
      player.side = 3;
    }
    if (isRight) {
      player.Velocity_X = player.speed;
      player.side = 4;
    }
    if (!isLeft && !isRight) {
      player.Velocity_X = 0;
    }
    if (!isUp && !isDown) {
      player.Velocity_Y = 0;
    }
    if (isUp && (isRight || isLeft)) {
      player.Velocity_Y = -player.diagonalSpeed;
    }
    if (isDown && (isRight || isLeft)) {
      player.Velocity_Y = player.diagonalSpeed;
    }
    if (isLeft && (isUp || isDown)) {
      player.Velocity_X = -player.diagonalSpeed;
    }
    if (isRight && (isUp || isDown)) {
      player.Velocity_X = player.diagonalSpeed;
    }
    if (player.side === 3) {
      player.sprite = spriteFrames["PCLeft-Idle" + currentFrame + ".png"];
    }
    if (player.side === 4) {
      player.sprite = spriteFrames["PCright" + currentFrame + ".png"];
    }
    player.X += player.Velocity_X;
    player.Y += player.Velocity_Y;
    grafx.clearRect(0, 0, gameCanvas.width, gameCanvas.height);
    grafx.drawImage(spritesheet, player.sprite.frame.x, player.sprite.frame.y, player.width, player.height, player.X, player.Y, player.width, player.height);
    return requestAnimationFrame(MainLoop);
  };

}).call(this);

/*
//@ sourceMappingURL=game.map
*/
